name: Deploy Garage Door Game to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'garage-door-game/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  PROJECT_ID: its-garages
  REGION: us-central1
  BACKEND_SERVICE: garage-door-backend
  FRONTEND_SERVICE: garage-door-frontend

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Enable required APIs
      run: |
        gcloud config set project $PROJECT_ID
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable containerregistry.googleapis.com

    - name: Build and Deploy Backend
      run: |
        cd garage-door-game/backend
        gcloud builds submit --tag gcr.io/$PROJECT_ID/$BACKEND_SERVICE
        gcloud run deploy $BACKEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars DATABASE_URL=sqlite:/tmp/garage_game.db \
          --set-env-vars UPLOAD_PATH=/tmp/uploads \
          --set-env-vars JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --set-env-vars GOOGLE_STREET_VIEW_API_KEY=${{ secrets.GOOGLE_STREET_VIEW_API_KEY }} \
          --set-env-vars GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
          --set-env-vars CORS_ORIGIN=https://itsgarages.itsfait.com

    - name: Capture Backend Startup Logs on Failure
      if: failure()
      run: |
        set -e
        echo "Backend deploy failed. Fetching Cloud Run startup logs for diagnosis..."
        gcloud config set project $PROJECT_ID
        # Determine the latest created revision (likely the failing one)
        REV=$(gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'value(status.latestCreatedRevisionName)' || true)
        echo "Latest created revision: ${REV:-<unknown>}"
        if [ -z "$REV" ]; then
          echo "Could not determine latest created revision. Showing service status:"
          gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'yaml(status)'
          exit 0
        fi
        echo "----- Last 50 textPayload log lines for revision $REV -----"
        gcloud logging read \
          "resource.type=cloud_run_revision AND resource.labels.service_name=$BACKEND_SERVICE AND resource.labels.revision_name=$REV" \
          --project=$PROJECT_ID \
          --limit=50 \
          --format="table(timestamp, severity, textPayload)"
        echo "----- Last 50 jsonPayload.message log lines for revision $REV -----"
        gcloud logging read \
          "resource.type=cloud_run_revision AND resource.labels.service_name=$BACKEND_SERVICE AND resource.labels.revision_name=$REV" \
          --project=$PROJECT_ID \
          --limit=50 \
          --format="table(timestamp, severity, jsonPayload.message)"


    - name: Check deployment status
      if: always()
      run: |
        echo "Checking deployment status..."
        LATEST_REV=$(gcloud run revisions list \
          --service=garage-door-backend \
          --region=us-central1 \
          --limit=1 \
          --format="value(name)")

        echo "Latest revision: $LATEST_REV"

        echo "=== Revision Status ==="
        gcloud run revisions describe $LATEST_REV \
          --region=us-central1 \
          --format="yaml(status.conditions,status.logUrl)"

        echo "=== All Logs (JSON) ==="
        gcloud logging read \
          "resource.type=cloud_run_revision AND resource.labels.service_name=garage-door-backend AND resource.labels.revision_name=$LATEST_REV" \
          --limit=200 \
          --format="json"

        echo "=== Error Logs Only ==="
        gcloud logging read \
          "resource.type=cloud_run_revision AND resource.labels.service_name=garage-door-backend AND resource.labels.revision_name=$LATEST_REV AND severity>=ERROR" \
          --limit=200 \
          --format="json"


    - name: Get Backend URL
      id: backend
      run: |
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Backend deployed at: $BACKEND_URL"

    outputs:
      backend-url: ${{ steps.backend.outputs.url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build and Deploy Frontend
      env:
        BACKEND_URL: ${{ needs.deploy-backend.outputs.backend-url }}
      run: |
        cd garage-door-game/frontend
        # Build with backend URL as build argument
        gcloud builds submit \
          --tag gcr.io/$PROJECT_ID/$FRONTEND_SERVICE \
          --build-arg VITE_API_BASE_URL=$BACKEND_URL/api \
          --build-arg PUBLIC_API_BASE_URL=$BACKEND_URL/api
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --set-env-vars NODE_ENV=production

    - name: Ensure Custom Domain Mapping
      env:
        DOMAIN_NAME: itsgarages.itsfait.com
      run: |
        set -e
        gcloud config set project $PROJECT_ID
        echo "Checking existing domain mapping for $DOMAIN_NAME"
        CURRENT_SERVICE=$(gcloud beta run domain-mappings describe --domain $DOMAIN_NAME --platform managed --region $REGION --format='value(spec.routeName)' || true)
        if [ -z "$CURRENT_SERVICE" ]; then
          echo "No existing mapping. Creating new mapping to $FRONTEND_SERVICE"
          gcloud beta run domain-mappings create \
            --domain $DOMAIN_NAME \
            --service $FRONTEND_SERVICE \
            --platform managed \
            --region $REGION \
            --certificate-mode=AUTOMATIC
        elif [ "$CURRENT_SERVICE" != "$FRONTEND_SERVICE" ]; then
          echo "Updating domain mapping from $CURRENT_SERVICE to $FRONTEND_SERVICE"
          gcloud beta run domain-mappings update \
            --domain $DOMAIN_NAME \
            --service $FRONTEND_SERVICE \
            --platform managed \
            --region $REGION
        else
          echo "Domain mapping already points to $FRONTEND_SERVICE"
        fi
        echo "Domain mapping status:"
        gcloud beta run domain-mappings describe --domain $DOMAIN_NAME --platform managed --region $REGION --format='yaml(status, spec)'

    - name: Show Deployment Results
      env:
        BACKEND_URL: ${{ needs.deploy-backend.outputs.backend-url }}
      run: |
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --platform managed --region $REGION --format 'value(status.url)')
        echo "üéâ Deployment complete!"
        echo "üîß Backend API: $BACKEND_URL"
        echo "üéÆ Frontend App: $FRONTEND_URL"
        echo "üåê Custom Domain: https://itsgarages.itsfait.com"
